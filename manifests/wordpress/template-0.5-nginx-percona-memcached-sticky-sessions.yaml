
apiVersion: v1
kind: ConfigMap
metadata:
  name: whoami-custom-php-ini
  namespace: percona
data:
  custom-php.ini: |+
    upload_max_filesize = 100M
    post_max_size = 100M
    memory_limit = 256M
    max_execution_time = 600
    max_input_vars = 1000
    max_input_time = 400

    ;extension=/usr/lib/php83/modules/memcached.so

    memcache.allow_failover = 1
    memcache.max_failover_attempts = 20
    memcache.chunk_size = 32768
    memcache.default_port = 11211
    memcache.hash_strategy = standard
    memcache.hash_function = crc32

---

# Wordpress env variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: whoami-wordpress-configmap
  namespace: percona
data:
  WORDPRESS_DB_HOST: percona-db-pxc-db-haproxy-replicas.percona.svc.cluster.local:3306 # DIRECT TO NODES: whoami-data-pxc-db-pxc-0.whoami-data-pxc-db-pxc.whoami.svc.cluster.local:3306,whoami-data-pxc-db-pxc-1.whoami-data-pxc-db-pxc.whoami.svc.cluster.local:3306,whoami-data-pxc-db-pxc-2.whoami-data-pxc-db-pxc.whoami.svc.cluster.local:3306
  WORDPRESS_DB_NAME: whoami_markitectos
  WORDPRESS_DB_USER: whoami_markitectos_user
  WORDPRESS_TABLE_PREFIX: wp_
  PHP_INI_SCAN_DIR: :/usr/local/etc/php/conf.d/custom-conf
  WORDPRESS_DEBUG: 'true' # defaults to disabled, non-empty value will enable WP_DEBUG in wp-config.php
  WORDPRESS_CONFIG_EXTRA: |
      // define( 'WP_HOME', 'https://' . $_SERVER['HTTP_HOST'] . '/' );
      // define( 'WP_SITEURL', 'https://' . $_SERVER['HTTP_HOST'] . '/' );
      // $_SERVER['HTTPS']='on';

      define( 'WP_AUTO_UPDATE_CORE', false );

      // Cache Configs
      define('WP_CACHE_KEY_SALT', 'whoami_markitectos_com');
      define('WP_CACHE', true);

      define( 'RT_WP_NGINX_HELPER_CACHE_PATH','/var/www/html/wp-content/nginx-cache');

      // Error logging
      
      // define('NGINX_HELPER_LOG', true); // Enables the login feature for the Nginx Helper Plugin on "/var/www/html/wp-content/uploads/nginx-helper/nginx.log"

      define('WP_DEBUG', true);
      define('WP_DEBUG_LOG', true);
      define( 'WP_DEBUG_DISPLAY', true );

      @ini_set( 'log_errors', 'On' );
      @ini_set( 'display_errors', 'On' );
      @ini_set( 'error_log', '/var/www/html/wp-content/debug.log' );

---

## To create the password value in base 64 to set this secret
# echo -n '<your_password>' | base64

## Sets the Secret Password for whoami DB
apiVersion: v1
kind: Secret
metadata:
  name: whoami-db-pass
  namespace: percona
type: Opaque
data:
  password: TWF4aTE0NjUh

---

# nginx configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: whoami-nginx-http-conf
  namespace: percona
data:
  nginx.conf: |-
    user  nginx;
    
    # Load the cache purge module
    ################################################################
    # load_module /etc/nginx/modules/ngx_http_cache_purge_module.so;
    ################################################################

    # Set to number of CPU cores, auto will try to autodetect.
    worker_processes  auto;

    # Maximum open file descriptors per process. Should be greater than worker_connections.
    worker_rlimit_nofile 8192;

    # File that stores the process ID. Rarely needs changing.
    # pid        /var/run/nginx.pid;
    pid        /tmp/nginx.pid;


    events {
      # Set the maximum number of connection each worker process can open. Anything higher than this
      # will require Unix optimisations.
      worker_connections 8000;

      # Accept all new connections as they're opened.
      multi_accept on;
    }

    http {

      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;

        ### GENERAL HTTP ###

        # Speed up file transfer by using sendfile().
        sendfile on;

        # Don't send partial frames, which increases throughput.
        tcp_nopush on;

        # Don't wait to send data in keep-alive state.
        tcp_nodelay on;        

        # MIME Types
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        ### LIMITS & TIMEOUTS ###

        # How long each connection should stay open for.
        keepalive_timeout 15;

        # Timeout for reading client request body.
        client_body_timeout 30;

        # Timeout for reading client request header.
        client_header_timeout 30;

        # Timeout for transmitting reponse to client.
        send_timeout 30;

        # Set the maximum allowed size of client request body. This should be set
        # to the value of files sizes you wish to upload to the WordPress Media Library.
        # You may also need to change the values `upload_max_filesize` and `post_max_size` within
        # your php.ini for the changes to apply.
        client_max_body_size 100m;        

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        # Some WP plugins that push large amounts of data via cookies
        # can cause 500 HTTP errors if these values aren't increased.
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;

        # Default Logs
        error_log /var/log/nginx/error.log warn;
        access_log /var/log/nginx/access.log;

        ### GZIP CONFIGS ###

        # Enable Gzip compression.
        gzip on;

        # Allow proxies to cache both compressed and regular version of file.
        # Avoids clients that don't support Gzip outputting gibberish.
        gzip_vary on;

        # Compress data, even when the client connects through a proxy.
        gzip_proxied any;

        # The level of compression to apply to files. A higher compression level increases
        # CPU usage. Level 5 is a happy medium resulting in roughly 75% compression.
        gzip_comp_level 5;

        # The minimum HTTP version of a request to perform compression.
        gzip_http_version 1.1;

        # Don't compress files smaller than 256 bytes, as size reduction will be negligible.
        gzip_min_length 256;

        # Compress the following MIME types.
        gzip_types
          application/atom+xml
          application/javascript
          application/json
          application/ld+json
          application/manifest+json
          application/rss+xml
          application/vnd.geo+json
          application/vnd.ms-fontobject
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/xhtml+xml
          application/xml
          font/opentype
          image/bmp
          image/svg+xml
          image/x-icon
          text/cache-manifest
          text/css
          text/plain
          text/vcard
          text/vnd.rim.location.xloc
          text/vtt
          text/x-component
          text/x-cross-domain-policy;
          # text/html is always compressed when enabled.

        include /etc/nginx/conf.d/*.conf;
    }

---

# nginx configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: whoami-nginx-server-default-conf
  namespace: percona
data:
  default.conf: |-

    # Define path to cache and memory zone. The memory zone should be unique.
    # keys_zone=single-site-with-caching.com:100m creates the memory zone and sets the maximum size in MBs.
    # inactive=60m will remove cached items that haven't been accessed for 60 minutes or more.
    fastcgi_cache_path /var/www/html/wp-content/nginx-cache levels=1:2 keys_zone=nginx-wordpress:100m inactive=60m;

    server {

        # Ports to listen on
        listen 80 default_server;

        # Path to document root
        root /var/www/html;

        # Server name to listen for
        server_name  _;

        # File to be used as index
        index index.php;

        ### EXCLUSIONS ###

        # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /\.(?!well-known\/) {
          deny all;
        }

        # Prevent access to certain file extensions
        location ~\.(ini|log|conf)$ {
          deny all;
        }

        # Deny access to any files with a .php extension in the uploads directory
        # Works in sub-directory installs and also in multisite network
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /(?:uploads|files)/.*\.php$ {
          deny all;
        }

        ### SECURITY ###

        # Generic security enhancements. Use https://securityheaders.io to test
        # and recommend further improvements.

        # Hide Nginx version in error messages and reponse headers.
        server_tokens off;

        # Don't allow pages to be rendered in an iframe on external domains.
        add_header X-Frame-Options "SAMEORIGIN" always;

        # MIME sniffing prevention
        add_header X-Content-Type-Options "nosniff" always;

        # Enable cross-site scripting filter in supported browsers.
        add_header X-Xss-Protection "1; mode=block" always;

        # Whitelist sources which are allowed to load assets (JS, CSS, etc). The following will block
        # only none HTTPS assets, but check out https://scotthelme.co.uk/content-security-policy-an-introduction/
        # for an in-depth guide on creating a more restrictive policy.
        # add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

        ### STATIC FILES ###

        # Don't cache appcache, document html and data.
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
          expires 0;
        }

        # Cache RSS and Atom feeds.
        location ~* \.(?:rss|atom)$ {
          expires 1h;
        }

        # Caches images, icons, video, audio, HTC, etc.
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
          expires 1y;
          access_log off;
        }

        # Cache svgz files, but don't compress them.
        location ~* \.svgz$ {
          expires 1y;
          access_log off;
          gzip off;
        }

        # Cache CSS and JavaScript.
        location ~* \.(?:css|js)$ {
          expires 1y;
          access_log off;
        }

        # Cache WebFonts.
        location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
          expires 1y;
          access_log off;
          add_header Access-Control-Allow-Origin *;
        }

        # Don't record access/error logs for robots.txt.
        location = /robots.txt {
          try_files $uri $uri/ /index.php?$args;
          access_log off;
          log_not_found off;
        }        

        ### FASTCGI CACHE CONFIGS ###

        # The key to use when saving cache files, which will run through the MD5 hashing algorithm.
        fastcgi_cache_key "$scheme$request_method$host$request_uri";

        # If an error occurs when communicating with FastCGI server, return cached content.
        # Useful for serving cached content if the PHP process dies or timeouts.
        fastcgi_cache_use_stale error timeout updating invalid_header http_500;

        # Allow caching of requests which contain the following headers.
        fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

        # Show the cache status in server responses.
        add_header Fastcgi-Cache $upstream_cache_status;

        # Don't skip by default
        set $skip_cache 0;

        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
          set $skip_cache 1;
        }

        if ($query_string != "") {
          set $skip_cache 1;
        }

        # Don't cache URIs containing the following segments
        if ($request_uri ~* "/wp-admin/|/wp-json/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml|/cart/|/checkout/|/my-account/") {
          set $skip_cache 1;
        }

        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in|edd_items_in_cart|woocommerce_items_in_cart") {
          set $skip_cache 1;
        }      

        # Add this new location block for cache purging
        # location ~ /purge(/.*) {
        #     proxy_cache_purge nginx-wordpress "$scheme$request_method$host$1";
        # }

        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
            try_files $uri =404;
            include /etc/nginx/fastcgi.conf;
            # include /etc/nginx/fastcgi_params;

            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;

            fastcgi_param   PATH_INFO       $fastcgi_path_info;
            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;

            # Skip cache based on rules in FASTCGI CACHE CONFIGS
            fastcgi_cache_bypass $skip_cache;
            fastcgi_no_cache $skip_cache;

            # Define memory zone for caching. Should match key_zone in fastcgi_cache_path above.
            fastcgi_cache nginx-wordpress;

            # Define caching time.
            fastcgi_cache_valid 60m;

        }
    }
    

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: whoami-wp-content-pvc
  namespace: percona
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: longhorn
  resources:
    requests:
      storage: 5Gi

---  

apiVersion: apps/v1
kind: Deployment
metadata:
  name: whoami-nginx-wordpress
  namespace: percona
spec:
  replicas: 3
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: whoami-nginx-wordpress
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: whoami-nginx-wordpress
    spec:
      volumes:
      - name: whoami-custom-php-ini
        configMap:
          name: whoami-custom-php-ini
      - name: whoami-wp-content-pv
        persistentVolumeClaim:
          claimName: whoami-wp-content-pvc   
      - name: whoami-nginx-conf
        configMap:
          name: whoami-nginx-http-conf
      - name: whoami-nginx-default-conf
        configMap:
          name: whoami-nginx-server-default-conf
      - name: shared-files
        emptyDir: {}
      containers:
        - name: whoami-wordpress
          image: wordpress:6.6.1-php8.3-fpm-alpine
          imagePullPolicy : IfNotPresent
          volumeMounts:
            - mountPath: /usr/local/etc/php/conf.d/custom-conf
              name: whoami-custom-php-ini
              readOnly: true
            - name: shared-files
              mountPath: /var/www/html
            - mountPath: /var/www/html/wp-content
              name: whoami-wp-content-pv
          envFrom:
            - configMapRef:
                name: whoami-wordpress-configmap
          env:
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: whoami-db-pass
                  key: password
        - name: whoami-nginx
          image: nginx:1.26.1-alpine3.19-slim
          imagePullPolicy : IfNotPresent   
          volumeMounts:
          - name: shared-files
            mountPath: /var/www/html
          - mountPath: /var/www/html/wp-content
            name: whoami-wp-content-pv
          - mountPath: "/etc/nginx/nginx.conf"
            subPath: nginx.conf
            name: whoami-nginx-conf
            readOnly: true
          - mountPath: "/etc/nginx/conf.d/default.conf"
            subPath: default.conf
            name: whoami-nginx-default-conf
            readOnly: true
        # - name: alpine-nginx
        #   image: alpine:3.19
        #   imagePullPolicy : Always 
        #   # volumeMounts:
        #   # - mountPath: /var/www/html
        #   #   name: shared-files
            
---

apiVersion: v1
kind: Service
metadata:
  namespace: percona
  name: whoami-nginx-wordpress
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  - name: https
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: whoami-nginx-wordpress
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: whoami-default-headers
  namespace: percona
spec:
  headers:
    browserXssFilter: true
    contentTypeNosniff: true
    forceSTSHeader: true
    stsIncludeSubdomains: true
    stsPreload: true
    stsSeconds: 15552000
    customFrameOptionsValue: SAMEORIGIN
    customRequestHeaders:
      X-Forwarded-Proto: https

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: whoami-ingress-route
  namespace: percona
  annotations: 
    kubernetes.io/ingress.class: traefik
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`www.whoami.markitectos.com`) || Host(`whoami.markitectos.com`)
      kind: Rule
      services:
        - name: whoami-nginx-wordpress
          port: 80
          sticky:
            cookie:
              httpOnly: true
              name: whoami-sticky-cookie
              secure: true
              sameSite: none
          strategy: RoundRobin
      middlewares:
        - name: whoami-default-headers
  tls:
    secretName: whoami-markitectos-ssl-secret

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: whoami-markitectos-certificate
  namespace: percona
spec:
  secretName: whoami-markitectos-ssl-secret
  issuerRef:
    name: letsencrypt-production
    kind: ClusterIssuer
  dnsNames:
    - 'whoami.markitectos.com'
    - 'www.whoami.markitectos.com'

