## https://www.youtube.com/watch?v=n5dpQLqOfqM
## https://github.com/ChristianLempa/boilerplates

# apiVersion: v1
# kind: Namespace
# metadata:
#   name: whoami
#   labels:
#     name: whoami

# ---

apiVersion: v1
kind: ConfigMap
metadata:
  name: whoami-custom-php-ini
  namespace: percona
data:
  custom-php.ini: |+
    upload_max_filesize = 100M
    post_max_size = 100M
    memory_limit = 256M
    max_execution_time = 600
    max_input_vars = 1000
    max_input_time = 400

    extension=memcached.so

    memcache.allow_failover = 1
    memcache.max_failover_attempts = 20
    memcache.chunk_size = 32768
    memcache.default_port = 11211
    memcache.hash_strategy = standard
    memcache.hash_function = crc32

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: whoami-w3-total-cache-config-db
  namespace: percona
data:
  config-db.php: |+
    <?php
    /**
     * File: config-db-sample.php
     *
     * @package W3TC
     */

    define( 'W3TC_CONFIG_DATABASE', true );

    // optional - specify table to store.
    define( 'W3TC_CONFIG_DATABASE_TABLE', 'wp_options' );

    // cache config in cache to prevent db queries on each http request.
    // if multiple http servers used - use only shared cache storage used by all
    // machines, since distributed flush operations are not supported for config
    // cache.

    // memcached cache config.
    define( 'W3TC_CONFIG_CACHE_ENGINE', 'memcached' );
    define( 'W3TC_CONFIG_CACHE_MEMCACHED_SERVERS', 'memcached-ha.percona.svc.cluster.local:11211' );

    // optional memcached settings.
    define( 'W3TC_CONFIG_CACHE_MEMCACHED_PERSISTENT', true );
    define( 'W3TC_CONFIG_CACHE_MEMCACHED_AWS_AUTODISCOVERY', false );
    define( 'W3TC_CONFIG_CACHE_MEMCACHED_USERNAME', '' );
    define( 'W3TC_CONFIG_CACHE_MEMCACHED_PASSWORD', '' );

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: whoami-pvc
  namespace: percona
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: longhorn
  resources:
    requests:
      storage: 5Gi

---     


# Wordpress Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whoami
  namespace: percona
spec:
  selector:
    matchLabels:
      app: whoami-app
  replicas: 3
  template:
    metadata:
      labels:
        app: whoami-app
        access-memcached: "true" # This label grants access to Memcached
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - whoami-app
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: whoami-pv
          persistentVolumeClaim:
            claimName: whoami-pvc      
        - name: whoami-custom-php-ini
          configMap:
            name: whoami-custom-php-ini
        - name: whoami-w3-total-cache-config-db
          configMap:
            name: whoami-w3-total-cache-config-db            
      # nodeSelector:
      #   kubernetes.io/hostname: r7-11
      hostAliases:
      - ip: 168.205.123.10
        hostnames:
        - whoami.markitectos.com
      # - ip: 127.0.0.1
      #   hostnames:
      #   - whoami.markitectos.com        
      containers:
        - name: whoami-container
          image: 'wordpress:6.6.0-php8.2-apache'
          volumeMounts:
            - mountPath: "/var/www/html/wp-content"
              name: whoami-pv        
            - mountPath: "/var/www/html/wp-content/config-db.php"
              subPath: config-db.php
              name: whoami-w3-total-cache-config-db
              readOnly: true 
            - mountPath: /usr/local/etc/php/conf.d/custom-conf
              name: whoami-custom-php-ini
              readOnly: true
            # - mountPath: "/other/path"
            #   name: other-pv-storage                     
          # resources:
          #   requests:
          #     memory: "256Mi" # Memory reserved
          #     cpu: "500m" # CPU reserved
          #   limits:
          #      memory: "512Mi" # Maximum memory allowed
          #      cpu: "1000m" # Maximum CPU allowed
          env:
            - name: WORDPRESS_DB_HOST
              value: percona-db-pxc-db-haproxy-replicas.percona.svc.cluster.local:3306 # DIRECT TO NODES: whoami-data-pxc-db-pxc-0.whoami-data-pxc-db-pxc.whoami.svc.cluster.local:3306,whoami-data-pxc-db-pxc-1.whoami-data-pxc-db-pxc.whoami.svc.cluster.local:3306,whoami-data-pxc-db-pxc-2.whoami-data-pxc-db-pxc.whoami.svc.cluster.local:3306
            - name: WORDPRESS_DB_NAME # needs to already exist on the given MySQL server; it will not be created by the wordpress container
              value: whoami_markitectos
            - name: WORDPRESS_DB_USER
              value: whoami_markitectos_user
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: whoami-whoami-pass
                  key: password
            - name: WORDPRESS_TABLE_PREFIX
              value: wp_
            - name: WORDPRESS_DEBUG # defaults to disabled, non-empty value will enable WP_DEBUG in wp-config.php
              value: 'true'
            - name: PHP_INI_SCAN_DIR
              value: :/usr/local/etc/php/conf.d/custom-conf
            - name: WORDPRESS_CONFIG_EXTRA
              value: |
                // define( 'WP_HOME', 'https://' . $_SERVER['HTTP_HOST'] . '/' );
                // define( 'WP_SITEURL', 'https://' . $_SERVER['HTTP_HOST'] . '/' );
                define( 'WP_AUTO_UPDATE_CORE', false );
                define('WP_DEBUG', true);
                define('WP_DEBUG_LOG', true);
                define( 'WP_DEBUG_DISPLAY', true );

                // Cache Configs
                define('WP_CACHE_KEY_SALT', 'whoami_markitectos_com');
                define('WP_CACHE', true);

                // Error logging

                @ini_set( 'log_errors', 'On' );
                @ini_set( 'display_errors', 'On' );
                @ini_set( 'error_log', '/var/www/html/wp-content/debug.log' );
                // $_SERVER['HTTPS']='on';
          ports:
            - containerPort: 80 
          imagePullPolicy: Always # IfNotPresent or Always
          livenessProbe: # Check if pod is alive, if not restart
            failureThreshold: 3
            httpGet:
              path: / # /wp-admin/install.php
              port: 80
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ##
          ## TODO: We will have to figure out how to add a readiness probe that runs with this image that starts without install
          ##
          readinessProbe: # Check if pod is ready, and enable it to get traffic only when is ready
           failureThreshold: 3
           httpGet:
             path: / # /wp-login.php
             port: 80
             scheme: HTTP
           initialDelaySeconds: 30
           periodSeconds: 10
           successThreshold: 1
           timeoutSeconds: 5
          lifecycle:
            postStart:
              exec:
                command: 
                  - "/bin/sh"
                  - "-c"
                  - >
                    apt-get update &&
                    apt-get install -y libmemcached-dev libmsgpack-dev zlib1g-dev libssl-dev &&
                    printf "\n" | pecl install memcached &&
                    /etc/init.d/apache2 reload &&
                    rm -r /var/www/html/wp-content/themes/twentytwentytwo &&
                    rm -r /var/www/html/wp-content/themes/twentytwentythree &&
                    rm -r /var/www/html/wp-content/plugins/akismet &&
                    rm /var/www/html/wp-content/plugins/hello.php                    
---


## To create the password value in base 64 to set this secret
# echo -n '<your_password>' | base64

## Sets the Secret Password for whoami DB
apiVersion: v1
kind: Secret
metadata:
  name: whoami-whoami-pass
  namespace: percona  
type: Opaque
data:
  password: TWF4aTE0NjUh


---

## https://github.com/dmancloud/traefik-cert-manager/blob/main/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: whoami-service
  namespace: percona
spec:
  type: ClusterIP
  selector:
    app: whoami-app
  ports:
    - name: http
      port: 80
      targetPort: 80

---

## https://github.com/dmancloud/traefik-cert-manager/blob/main/traefik/default-headers.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: default-headers
  namespace: percona
spec:
  headers:
    browserXssFilter: true
    contentTypeNosniff: true
    forceSTSHeader: true
    stsIncludeSubdomains: true
    stsPreload: true
    stsSeconds: 15552000
    customFrameOptionsValue: SAMEORIGIN
    customRequestHeaders:
      X-Forwarded-Proto: https

---
## https://github.com/dmancloud/traefik-cert-manager/blob/main/nginx/ingress.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: whoami-ingress-route
  namespace: percona
  annotations: 
    kubernetes.io/ingress.class: traefik
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`www.whoami.markitectos.com`) || Host(`whoami.markitectos.com`)
      kind: Rule
      services:
        - name: whoami-service
          port: 80
          sticky:
            cookie:
              httpOnly: true
              name: whoami-sticky-cookie
              secure: true
              sameSite: none
          strategy: RoundRobin
      middlewares:
        - name: default-headers
  tls:
    secretName: whoami-markitectos-ssl-secret


---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: whoami-markitectos-certificate
  namespace: percona
spec:
  secretName: whoami-markitectos-ssl-secret
  issuerRef:
    # name: letsencrypt-staging
    name: letsencrypt-production
    kind: ClusterIssuer
  dnsNames:
    - 'whoami.markitectos.com'
    - 'www.whoami.markitectos.com'