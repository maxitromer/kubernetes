# https://github.com/cloudnative-pg/cloudnative-pg/tree/main/docs/src/samples

apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres-cluster
  namespace: databases
spec:
  instances: 3  # Ensure 3 replicas for high availability
  imageName: ghcr.io/cloudnative-pg/postgresql:17.2-18  # Use the PostgreSQL version you prefer => https://github.com/cloudnative-pg/postgres-containers/pkgs/container/postgresql/versions?filters%5Bversion_type%5D=tagged
  storage:
    storageClass: raid-ssd-cached-local-path # longhorn
    size: 1024Gi  # Cannot be resized!
  primaryUpdateStrategy: unsupervised  # Automatically update primary
  primaryUpdateMethod: switchover # setting the most aligned replica as the new target primary, and shutting down the former primary pod
  enableSuperuserAccess: true  # Enable superuser creation and usage
  postgresql:
    parameters:

      # **Memory and Cache**
      shared_buffers: "2GB"  # Adjusted for optimal memory usage
      effective_cache_size: "6GB"  # Roughly 3x shared_buffers
      work_mem: "16MB"  # Increased for better join/sort performance
      maintenance_work_mem: "256MB"  # For VACUUM and other maintenance tasks
      temp_buffers: "32MB"  # Memory for temporary tables
      
      # **Logging and WAL**
      wal_level: "replica"  # Required for replication
      max_wal_size: "1GB"  # Increased to reduce checkpoint frequency
      min_wal_size: "256MB"
      wal_buffers: "4MB"  # Cache for WAL writes
      synchronous_commit: "remote_apply" # "on"  # Similar to innodb_flush_log_at_trx_commit=1
      archive_mode: "on"
      # archive_command: "cp %p /var/lib/postgresql/data/archive/%f"
      
      # **Connections and Concurrency**
      max_connections: "100"  # Reduced to avoid memory overload
      superuser_reserved_connections: "3"  # Reserve connections for admin tasks
      
      # **Replication**
      # synchronous_standby_names: "*"  # Wait for at least 1 standby to acknowledge
      # hot_standby: "on"  # Allow reads from replicas
      
      # **Disk I/O**
      effective_io_concurrency: "1"  # Adjusted for disk I/O concurrency
      max_parallel_workers_per_gather: "1"  # Reduce parallelism to avoid overloading
      parallel_setup_cost: "1000"
      parallel_tuple_cost: "0.1"
      
      # **Table and Cache Management**
      max_locks_per_transaction: "1500"  # Similar to table_open_cache
      max_files_per_process: "15000"  # Similar to table_open_cache
      
      # **Write-Ahead Logging (WAL) Settings**
      wal_writer_delay: "150ms"
      commit_delay: "100"  # Delay commit to group commits together
      
      # **Autovacuum and Maintenance**
      autovacuum: "on"
      autovacuum_max_workers: "2"
      autovacuum_naptime: "10s"
      autovacuum_vacuum_threshold: "50"
      autovacuum_analyze_threshold: "50"
      autovacuum_vacuum_cost_limit: "100"
      
      # **Other Key Settings**
      max_worker_processes: "4"
      max_parallel_workers: "4"
      default_statistics_target: "100"
      random_page_cost: "1.1"  # Tuning for SSDs
      cpu_tuple_cost: "0.01"
      cpu_index_tuple_cost: "0.005"
      cpu_operator_cost: "0.0025"

  monitoring:
    enablePodMonitor: true

  resources:
    # requests:
    #   cpu: "1"
    #   memory: "1Gi"
    limits:
      cpu: "4"
      memory: "8Gi"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: kubernetes.io/hostname
    nodeSelector:
      kubernetes.io/arch: amd64

# https://www.datascienceengineer.com/blog/post-backups-with-cloudnativepg

  backup:
    barmanObjectStore:
      destinationPath: s3://markitectos-postgres-cluster/
      endpointURL: https://s3.us-east-005.backblazeb2.com
      s3Credentials:
        accessKeyId:
          key: B2_ACCESS_KEY_ID
          name: postgres-b2-backup-secret
        secretAccessKey:
          key: B2_APPLICATION_KEY
          name: postgres-b2-backup-secret
      wal:
        compression: gzip
        encryption: AES256
      data:
        compression: gzip
        encryption: AES256
        jobs: 2
    retentionPolicy: "30d"

---

# echo -n "005ebe0f7010c550000000006" | base64
# echo -n "K005fZ5eZKJRq7gumOBWqC/mRxUYgB0" | base64

apiVersion: v1
kind: Secret
metadata:
  name: postgres-b2-backup-secret
  namespace: databases
type: Opaque
data:  # Values are base64 encoded
  B2_ACCESS_KEY_ID: MDA1ZWJlMGY3MDEwYzU1MDAwMDAwMDAwNg==          # Paste the base64-encoded Access Key ID
  B2_APPLICATION_KEY: SzAwNWZaNWVaS0pScTdndW1PQldxQy9tUnhVWWdCMA== # Paste the base64-encoded Application Key

---

apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name:  postgres-db-backup-schedule
  namespace: databases
spec:
  schedule: "0 0 3 * * 0" # Every Sunday at 3am
  suspend: false # Determines if the backup schedule should be suspended
  immediate: true # Determines if the first backup should be done immediately
  backupOwnerReference: self
  cluster:
    name: postgres-cluster

---

apiVersion: postgresql.cnpg.io/v1
kind: Pooler
metadata:
  name: db-pooler-rw
  namespace: databases
spec:
  cluster:
    name: postgres-cluster
  instances: 3
  type: rw
  pgbouncer:
    poolMode: transaction
    parameters:
      max_client_conn: "1000"
      default_pool_size: "10"
  monitoring:
    enablePodMonitor: true
  template:
    metadata:
      labels:
        app: pooler
    spec:
      containers: []
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pooler
            topologyKey: "kubernetes.io/hostname"    