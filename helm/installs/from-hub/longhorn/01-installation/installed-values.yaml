# IMPORTANT NOTE
# Run the next commands to patch the daemonset after every upgrade:
# k get daemonsets -n longhorn-system
# kubectl patch daemonset <ENGINE IMAGE DAEMONSET NAME> -n longhorn-system -p '{"spec":{"template":{"spec":{"nodeSelector":{"custom.longhorn.instance": "enabled"}}}}}'
# kubectl patch daemonset longhorn-csi-plugin -n longhorn-system -p '{"spec":{"template":{"spec":{"nodeSelector":{"custom.longhorn.instance": "enabled"}}}}}'

global:
  # -- Toleration for nodes allowed to run user-deployed components such as Longhorn Manager, Longhorn UI, and Longhorn Driver Deployer.
  tolerations:
  - key: "no-arm-enabled"
    operator: "Exists"
    effect: "NoSchedule"   
  nodeSelector:
    ### custom.longhorn.instance: "enabled"  
  cattle:
    defaultSetting:
      taintToleration: custom.longhorn.instance=enabled:NoSchedule; no-arm-enabled=true:NoSchedule
      ### systemManagedComponentsNodeSelector: custom.longhorn.instance:enabled 

defaultSettings:
  # Endpoint used to access the backupstore
  backupTarget: "s3://markitectos-longhorn@us-east-005/"

  # Name of the Kubernetes secret associated with the backup target
  backupTargetCredentialSecret: "backblaze-secret"
  # -- Taint or toleration for system-managed Longhorn components.
  # Specify values using a semicolon-separated list in `kubectl taint` syntax (Example: key1=value1:effect; key2=value2:effect).
  taintToleration: custom.longhorn.instance=enabled:NoSchedule; no-arm-enabled=true:NoSchedule
  # -- Node selector for system-managed Longhorn components.
  ### systemManagedComponentsNodeSelector: custom.longhorn.instance:enabled
  # -- Percentage of the total allocatable CPU resources on each node to be reserved for each instance manager pod when the V1 Data Engine is enabled. The default value is "12".
  guaranteedInstanceManagerCPU: 4

longhornManager:
  nodeSelector:
    ### custom.longhorn.instance: "enabled"
  tolerations:
  - key: "no-arm-enabled"
    operator: "Exists"
    effect: "NoSchedule"
longhornDriver:
  nodeSelector:
    ### custom.longhorn.instance: "enabled"
  tolerations:
  - key: "no-arm-enabled"
    operator: "Exists"
    effect: "NoSchedule"
longhornUI:
  replicas: 2
  nodeSelector:
    ### custom.longhorn.instance: "enabled"
  tolerations:
  - key: "no-arm-enabled"
    operator: "Exists"
    effect: "NoSchedule"

metrics:
  serviceMonitor:
    enabled: true
    additionalLabels: {}
    interval: 30s  # Define scrape interval
    scrapeTimeout: 10s  # Set scrape timeout 