{{- if $.Values.nginx.customNginxConf.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $.Release.Name }}-default-conf
  namespace: {{ $.Release.Namespace }}
data:
  default.conf: |

    {{- if $.Values.nginx.customNginxConf.enableFastCGICache }}
    # Define path to cache and memory zone. The memory zone should be unique.
    # keys_zone=single-site-with-caching.com:100m creates the memory zone and sets the maximum size in MBs.
    # inactive=60m will remove cached items that haven't been accessed for 60 minutes or more.
    # fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=nginx-wordpress:{{ $.Values.nginx.customNginxConf.cacheSizeMB }}m inactive={{ $.Values.nginx.customNginxConf.removeInactiveItemsMinutes }}m;
    fastcgi_cache_path /var/www/html/wp-content/nginx-cache levels=1:2 keys_zone=nginx-wordpress:{{ $.Values.nginx.customNginxConf.cacheSizeMB }}m inactive={{ $.Values.nginx.customNginxConf.removeInactiveItemsMinutes }}m;    

    {{- end }}
    server {

        # Ports to listen on
        listen 80 default_server;

        # Path to document root
        root /var/www/html;

        # Server name to listen for
        server_name {{ range .Values.domains.names }}{{ . }} {{ if $.Values.domains.addWWW }}www.{{ . }} {{ end }}{{ end }};

        # File to be used as index
        index index.php;

        ### EXCLUSIONS ###

        # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /\.(?!well-known\/) {
          deny all;
        }

        # Prevent access to certain file extensions
        location ~\.(ini|log|conf)$ {
          deny all;
        }

        # Deny access to any files with a .php extension in the uploads directory
        # Works in sub-directory installs and also in multisite network
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        location ~* /(?:uploads|files)/.*\.php$ {
          deny all;
        }

        ### SECURITY ###

        # Generic security enhancements. Use https://securityheaders.io to test
        # and recommend further improvements.

        # Hide Nginx version in error messages and reponse headers.
        server_tokens off;

        # Don't allow pages to be rendered in an iframe on external domains.
        add_header X-Frame-Options "SAMEORIGIN" always;

        # MIME sniffing prevention
        add_header X-Content-Type-Options "nosniff" always;

        # Enable cross-site scripting filter in supported browsers.
        add_header X-Xss-Protection "1; mode=block" always;

        # Whitelist sources which are allowed to load assets (JS, CSS, etc). The following will block
        # only none HTTPS assets, but check out https://scotthelme.co.uk/content-security-policy-an-introduction/
        # for an in-depth guide on creating a more restrictive policy.
        # add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

        ### STATIC FILES ###

        {{- if $.Values.nginx.customNginxConf.enableBrowserCache }}
        # Don't cache appcache, document html and data.
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
          expires 0;
        }

        # Cache RSS and Atom feeds.
        location ~* \.(?:rss|atom)$ {
          expires 1h;
        }

        # Caches images, icons, video, audio, HTC, etc.
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
          expires 1y;
          access_log off;
        }

        # Cache svgz files, but don't compress them.
        location ~* \.svgz$ {
          expires 1y;
          access_log off;
          gzip off;
        }

        # Cache CSS and JavaScript.
        location ~* \.(?:css|js)$ {
          expires 1y;
          access_log off;
        }

        # Cache WebFonts.
        location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
          expires 1y;
          access_log off;
          add_header Access-Control-Allow-Origin *;
        }
        {{- end }}

        # Don't record access/error logs for robots.txt.
        location = /robots.txt {
          try_files $uri $uri/ /index.php?$args;
          access_log off;
          log_not_found off;
        }        

        {{- if $.Values.nginx.customNginxConf.enableFastCGICache }}
        ### FASTCGI CACHE CONFIGS ###

        # The key to use when saving cache files, which will run through the MD5 hashing algorithm.
        fastcgi_cache_key "$scheme$request_method$host$request_uri";

        # If an error occurs when communicating with FastCGI server, return cached content.
        # Useful for serving cached content if the PHP process dies or timeouts.
        fastcgi_cache_use_stale error timeout updating invalid_header http_500;

        # Allow caching of requests which contain the following headers.
        fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

        # Show the cache status in server responses.
        add_header Fastcgi-Cache $upstream_cache_status;

        # Don't skip by default
        set $skip_cache 0;

        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
          set $skip_cache 1;
        }

        if ($query_string != "") {
          set $skip_cache 1;
        }

        # Don't cache URIs containing the following segments
        if ($request_uri ~* "{{ range $index, $url := $.Values.nginx.customNginxConf.dontCacheURLs }}{{if $index}}|{{end}}{{ $url }}{{ end }}") {
          set $skip_cache 1;
        }
        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "{{ range $index, $cookie := $.Values.nginx.customNginxConf.dontCacheCookies }}{{if $index}}|{{end}}{{ $cookie }}{{ end }}") {
          set $skip_cache 1;
        }

        # Add this new location block for cache purging
        location ~ /purge(/.*) {
            fastcgi_cache_purge nginx-wordpress "$scheme$request_method$host$1";
        }
        {{- end }}

        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
            try_files $uri =404;
            include /etc/nginx/fastcgi_params;

            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;

            fastcgi_param   PATH_INFO       $fastcgi_path_info;
            fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;

            {{- if $.Values.nginx.customNginxConf.enableFastCGICache }}
            # Skip cache based on rules in FASTCGI CACHE CONFIGS
            fastcgi_cache_bypass $skip_cache;
            fastcgi_no_cache $skip_cache;

            # Define memory zone for caching. Should match key_zone in fastcgi_cache_path above.
            fastcgi_cache nginx-wordpress;

            # Define caching time.
            fastcgi_cache_valid {{ $.Values.nginx.customNginxConf.removeInactiveItemsMinutes }}m;
            {{- end }}

        }

    }
{{- end }}    