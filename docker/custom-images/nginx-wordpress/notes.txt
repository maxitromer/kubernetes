# Use the official WordPress image as the base
FROM wordpress:6.6.1-php8.3-fpm-alpine

# Install necessary packages and build dependencies
RUN apk add --no-cache \
    libmemcached-dev \
    nginx \
    nginx-mod-http-cache-purge \
    autoconf \
    g++ \
    zlib-dev \
    make \
    wget \
    unzip \
    sed

# Install and enable memcached extension
RUN pecl install memcached \
    && docker-php-ext-enable memcached

# Clean up build dependencies
RUN apk del autoconf g++ make

# Copy custom nginx configuration file
COPY build/default.conf /etc/nginx/http.d/default.conf


-----

https://sourcegraph.com/cody/chat

---
Dockerfile
---

# Use the official WordPress image as the base
FROM wordpress:6.6.1-php8.3-fpm-alpine

# Install necessary packages and build dependencies
RUN apk add --no-cache \
    libmemcached-dev \
    nginx \
    nginx-mod-http-cache-purge \
    autoconf \
    g++ \
    zlib-dev \
    make \
    wget \
    unzip \
    sed

# Install and enable memcached extension
RUN pecl install memcached \
    && docker-php-ext-enable memcached

# Copy custom nginx configuration file
COPY build/default.conf /etc/nginx/http.d/default.conf

# Download and install HyperDB plugin
RUN wget https://downloads.wordpress.org/plugin/hyperdb.zip -O /tmp/hyperdb.zip \
    && unzip /tmp/hyperdb.zip -d /var/www/html/wp-content/plugins/ \
    && rm /tmp/hyperdb.zip

# Copy HyperDB configuration file
COPY build/db-config.php /var/www/html/db-config.php

# Move HyperDB's db.php to wp-content directory
RUN mv /var/www/html/wp-content/plugins/hyperdb/db.php /var/www/html/wp-content/db.php

# Download and install W3 Total Cache plugin
RUN wget https://downloads.wordpress.org/plugin/w3-total-cache.zip -O /tmp/w3-total-cache.zip \
    && unzip /tmp/w3-total-cache.zip -d /var/www/html/wp-content/plugins/ \
    && rm /tmp/w3-total-cache.zip

# Rename W3 Total Cache's db.php to db-cache.php
RUN mv /var/www/html/wp-content/plugins/w3-total-cache/wp-content/db.php /var/www/html/wp-content/plugins/w3-total-cache/wp-content/db-cache.php

# Update W3 Total Cache configuration
RUN sed -i 's/define(.W3TC_INSTALL_FILE_DB., W3TC_INSTALL_DIR . .\/db.php.);/define('"'"'W3TC_INSTALL_FILE_DB'"'"', W3TC_INSTALL_DIR . '"'"'\/db-cache.php'"'"');/' /var/www/html/wp-content/plugins/w3-total-cache/w3-total-cache-api.php \
    && sed -i 's/define(.W3TC_ADDIN_FILE_DB., WP_CONTENT_DIR . .\/db.php.);/define('"'"'W3TC_ADDIN_FILE_DB'"'"', WP_CONTENT_DIR . '"'"'\/db-cache.php'"'"');/' /var/www/html/wp-content/plugins/w3-total-cache/w3-total-cache-api.php

# Create a custom entrypoint script
COPY build/entrypoint.sh /usr/local/bin/custom-entrypoint.sh
RUN chmod +x /usr/local/bin/custom-entrypoint.sh

# Clean up build dependencies
RUN apk del autoconf g++ make wget unzip sed

# Set the custom entrypoint
ENTRYPOINT ["/usr/local/bin/custom-entrypoint.sh"]
CMD ["php-fpm"]


----
docker-compose.yaml
----

version: '3'

services:
  wordpress:
    image: markitectos/testing:custom_wp6.6.1-php8.3-fpm-alpine
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_USER: user
      WORDPRESS_DB_PASSWORD: password
    depends_on:
      - db
    volumes:
      - ./db-config.php:/var/www/html/db-config.php
      - ./custom-wp-config.php:/var/www/html/wp-config.php

  db:
    image: percona/percona-server:8.0.37-29
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    command: >
      --default-authentication-plugin=mysql_native_password
      --tls-version=TLSv1.2,TLSv1.3
    deploy:
      resources:
        limits:
          memory: 512M



-----
custom-wp-config.php
-----

<?php
// Add this line at the beginning of the file
define('DB_CONFIG_FILE', '/var/www/html/db-config.php');

// Include the original wp-config.php
require_once('/var/www/html/wp-config.php');

// You can add any other custom configurations here



-----
db-config.php
-----

<?php
$wpdb->add_database(array(
    'host'     => $_ENV['WORDPRESS_DB_HOST'],
    'user'     => $_ENV['WORDPRESS_DB_USER'],
    'password' => $_ENV['WORDPRESS_DB_PASSWORD'],
    'name'     => $_ENV['WORDPRESS_DB_NAME'],
    'write'    => 1,
    'read'     => 1,
    'dataset'  => 'global',
    'timeout'  => 0.2,
));

// You can add more database configurations here if needed

// The following is optional, but recommended. It allows HyperDB to choose
// an appropriate connection when one fails.
$wpdb->add_callback('dataset', 'global');

// This is also optional, but recommended. It allows HyperDB to track the
// call stack and attempt to retry queries that may have failed due to a
// stale connection.
$wpdb->save_queries = true;
